import { useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

/**
 * Hook para gestionar autom√°ticamente el cambio de estados de rentas
 * seg√∫n las reglas de negocio establecidas:
 * 
 * 1. Cambio a "pr√≥ximo" para rentas entre 0 y 7 d√≠as antes de vencer
 * 2. Cambio a "vencida" y cambio de cuenta a "corte" un d√≠a despu√©s de vencer
 * 3. Restaurar cuentas en "tr√°mite" a "disponible" despu√©s de 1 minuto
 */
export const useRealtimeStatus = () => {
  useEffect(() => {
    console.log("‚è∞ Iniciando useRealtimeStatus hook");
    
    // Ejecutar la actualizaci√≥n de estados al montar el componente
    updateRentalStates();
    
    // Restaurar cuentas en tr√°mite expiradas inmediatamente
    checkExpiredPendingAccounts();
    console.log("‚úÖ Primera verificaci√≥n de cuentas en tr√°mite ejecutada");
    
    // Programar actualizaci√≥n diaria a la misma hora
    const now = new Date();
    const nextUpdate = new Date(
      now.getFullYear(),
      now.getMonth(),
      now.getDate() + 1, // Ma√±ana a las 4AM
      4, 0, 0
    );
    
    // Calcular milisegundos hasta la pr√≥xima actualizaci√≥n
    let timeUntilNextUpdate = nextUpdate.getTime() - now.getTime();
    if (timeUntilNextUpdate < 0) {
      // Si ya pas√≥ la hora de hoy, programar para ma√±ana
      timeUntilNextUpdate += 24 * 60 * 60 * 1000;
    }
    
    // Programar verificaci√≥n de cuentas en tr√°mite con m√°s frecuencia (cada 15 segundos)
    console.log("üîÑ Configurando intervalo de verificaci√≥n cada 15 segundos");
    let checkCounter = 0;
    const pendingCheckIntervalId = setInterval(() => {
      checkCounter++;
      console.log(`üîç Ejecutando verificaci√≥n #${checkCounter} de cuentas en tr√°mite`);
      checkExpiredPendingAccounts();
    }, 15 * 1000); // Verificar cada 15 segundos para pruebas
    
    // Programar la primera actualizaci√≥n diaria
    const timeoutId = setTimeout(() => {
      updateRentalStates();
      
      // Despu√©s de la primera ejecuci√≥n, programar actualizaciones diarias
      const intervalId = setInterval(() => {
        updateRentalStates();
      }, 24 * 60 * 60 * 1000); // 24 horas en milisegundos
      
      // Guardar el ID del intervalo para limpiarlo despu√©s
      return () => {
        clearInterval(intervalId);
        clearInterval(pendingCheckIntervalId);
      };
    }, timeUntilNextUpdate);
    
    // Funci√≥n de limpieza
    return () => {
      console.log("üõë Limpiando useRealtimeStatus hook");
      clearTimeout(timeoutId);
      clearInterval(pendingCheckIntervalId);
    };
  }, []);
  
  // Funci√≥n para verificar y restaurar cuentas en tr√°mite expiradas
  const checkExpiredPendingAccounts = async () => {
    try {
      // Primero consultar cu√°ntas cuentas est√°n en "tr√°mite" actualmente
      const { data: tramiteAccounts, error: countError } = await supabase
        .from('cuenta')
        .select('id, last_updated')
        .eq('estado', 'tramite');
      
      if (countError) {
        console.error("Error al consultar cuentas en tr√°mite:", countError);
        return;
      }
      
      const now = new Date();
      const expiredAccounts = tramiteAccounts?.filter(acc => {
        const lastUpdated = new Date(acc.last_updated);
        const diffMs = now.getTime() - lastUpdated.getTime();
        const diffSec = Math.floor(diffMs / 1000);
        return diffSec >= 60; // 60 segundos = 1 minuto
      }) || [];
      
      console.log(`üìä Cuentas en tr√°mite: ${tramiteAccounts?.length || 0}, expiradas: ${expiredAccounts.length}`);
      
      if (expiredAccounts.length > 0) {
        console.log("‚ö†Ô∏è Cuentas expiradas encontradas:", expiredAccounts);
        
        // Si hay cuentas expiradas, actualizar manualmente cada una como respaldo adicional
        for (const account of expiredAccounts) {
          console.log(`üî® Actualizando manualmente cuenta #${account.id} de tr√°mite a disponible`);
          
          const { error: manualUpdateError } = await supabase
            .from('cuenta')
            .update({ 
              estado: 'disponible', 
              last_updated: new Date().toISOString() 
            })
            .eq('id', account.id)
            .eq('estado', 'tramite'); // Solo actualizar si sigue en tr√°mite
            
          if (manualUpdateError) {
            console.error(`‚ùå Error al actualizar manualmente cuenta #${account.id}:`, manualUpdateError);
          } else {
            console.log(`‚úÖ Cuenta #${account.id} actualizada manualmente a disponible`);
          }
        }
        
        // Ejecutar tambi√©n la funci√≥n RPC para registro y comparar resultados
        const { data: result, error } = await supabase
          .rpc('restaurar_cuentas_tramite_expiradas');
          
        if (error) {
          console.error("‚ùå Error restaurando cuentas en tr√°mite:", error);
        } else {
          console.log(`‚úÖ Funci√≥n restaurar_cuentas_tramite_expiradas ejecutada correctamente. Resultado: ${result}`);
          
          // Verificar si realmente se actualizaron las cuentas
          setTimeout(async () => {
            const { data: afterAccounts, error: afterError } = await supabase
              .from('cuenta')
              .select('id, estado')
              .in('id', expiredAccounts.map(acc => acc.id));
              
            if (afterError) {
              console.error("Error al verificar estado posterior:", afterError);
            } else {
              const stillInTramite = afterAccounts?.filter(acc => acc.estado === 'tramite') || [];
              console.log(`üîÑ Estado despu√©s de restauraci√≥n: ${stillInTramite.length} cuentas siguen en tr√°mite de ${expiredAccounts.length} que deb√≠an restaurarse`);
            }
          }, 1000); // Verificar despu√©s de 1 segundo
        }
      }
    } catch (err) {
      console.error("‚ùå Error al verificar cuentas en tr√°mite:", err);
    }
  };
  
  // Funci√≥n para actualizar estados de rentas seg√∫n condiciones de fechas
  const updateRentalStates = async () => {
    try {
      const fechaActual = new Date();
      
      // 1. Actualizar rentas que est√°n entre 0 y 7 d√≠as de vencer
      // Ya no necesitamos calcular una fecha espec√≠fica para las rentas pr√≥ximas
      // porque la funci√≥n SQL ahora utiliza la fecha actual (CURRENT_DATE)
      // y calcula el rango internamente
      const { error: proximo_error } = await supabase
        .rpc('actualizar_rentas_proximas_a_vencer', { 
          fecha_referencia: fechaActual.toISOString().split('T')[0] 
        });
      
      if (proximo_error) {
        console.error("Error actualizando rentas pr√≥ximas:", proximo_error);
      }
      
      // 2. Actualizar rentas vencidas (1 d√≠a despu√©s de fecha_fin)
      const unDiaAntes = new Date(fechaActual);
      unDiaAntes.setDate(unDiaAntes.getDate() - 1);
      
      const fechaUnDiaAntes = unDiaAntes.toISOString().split('T')[0];
      
      // Llamar a la funci√≥n SQL para actualizar rentas vencidas y sus cuentas
      const { error: vencida_error } = await supabase
        .rpc('actualizar_rentas_vencidas', { 
          fecha_referencia: fechaUnDiaAntes 
        });
        
      if (vencida_error) {
        console.error("Error actualizando rentas vencidas:", vencida_error);
      }
      
      // Tambi√©n verificamos las cuentas en tr√°mite expiradas en la verificaci√≥n diaria
      await checkExpiredPendingAccounts();
      
      console.log(`Actualizaci√≥n de estados completada: ${new Date().toLocaleString()}`);
    } catch (err) {
      console.error("Error en actualizaci√≥n autom√°tica de estados:", err);
    }
  };
  
  // Exponer las funciones para uso manual si es necesario
  return {
    updateRentalStates,
    checkExpiredPendingAccounts
  };
}; 